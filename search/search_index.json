{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Matsci Odia - Functional Requirements","text":"<p>Welcome to the documentation for the Matsci Odia Learning Platform. This site outlines the functional and non-functional requirements, user roles, and technical specifications for the product.</p>"},{"location":"#navigate","title":"Navigate:","text":"<ul> <li>User Requirements</li> <li>Admin and Super Admin</li> <li>Content &amp; Course Management</li> <li>Live Classes &amp; Tests</li> <li>Payments &amp; Monetization</li> <li>Infrastructure &amp; Security</li> <li>Overview</li> <li>Engineering notes</li> </ul>"},{"location":"admin-requirements/","title":"Admin and Super Admin Requirements","text":""},{"location":"admin-requirements/#admin-features","title":"Admin Features","text":"<ul> <li>Schedule live classes, tests, webinars</li> <li>Create/manage courses and subjects</li> <li>Assign/remove teachers from courses</li> <li>Modify user records, block or unsubscribe users</li> <li>Upload and organize course materials</li> </ul>"},{"location":"admin-requirements/#super-admin-features","title":"Super Admin Features","text":"<ul> <li>Full Admin access</li> <li>Learning analytics dashboard</li> <li>Add students manually</li> <li>Monitor user behavior and identify at-risk students</li> <li>Global system configuration and permissions</li> </ul>"},{"location":"content-courses/","title":"Content &amp; Course Management","text":""},{"location":"content-courses/#content-upload","title":"Content Upload","text":"<ul> <li>Upload from local/cloud</li> <li>Large-file SDK with pause/resume</li> <li>Bulk video library migration</li> <li>Webhook notifications</li> <li>Tag and categorize videos</li> </ul>"},{"location":"content-courses/#course-management","title":"Course Management","text":"<ul> <li>Fields: Name, Description, Category, Subcategory, Duration, Image</li> <li>Teachers assigned to course</li> <li>Folder structure for notes, recordings, tests</li> <li>Export/import of materials</li> </ul>"},{"location":"content-courses/#branding","title":"Branding","text":"<ul> <li>Instructor bios with profile and experience</li> <li>Custom branding of course pages</li> </ul>"},{"location":"engineering-notes/","title":"Engineering Notes for Web and Mobile Development","text":"<p>This document provides important guidance for the engineering team building the Matsci Odia educational platform. These principles aim to ensure performance, reliability, accessibility, and long-term maintainability of both the web and mobile applications.</p>"},{"location":"engineering-notes/#1-keep-the-learning-context-in-mind","title":"1. Keep the Learning Context in Mind","text":"<ul> <li>Unstable Connectivity: Many students will connect from low-bandwidth rural areas. All live classes, chat, and content should gracefully degrade and auto-retry.</li> <li>Low-End Devices: Mobile apps must be optimized for devices with low RAM, old Android/iOS versions, and small screens.</li> <li>Asynchronous Access: Not all students can join live \u2014 make sure lectures are recorded, accessible, and playable at low resolution.</li> </ul>"},{"location":"engineering-notes/#2-web-mobile-ux-expectations","title":"2. Web &amp; Mobile UX Expectations","text":"<ul> <li>Prioritize Mobile-First Design: Use responsive frameworks and touch-friendly layouts.</li> <li>Minimize Clicks to Join: Students should reach a live class in under 3 taps/clicks from the homepage.</li> <li>Offline Considerations: Handle offline states gracefully \u2014 show \u201cYou are offline\u201d banners, cache lecture links, and queue submissions when needed.</li> <li>Accessible UX: Support keyboard navigation and screen readers (especially on web).</li> </ul>"},{"location":"engineering-notes/#3-code-quality-performance","title":"3. Code Quality &amp; Performance","text":"<ul> <li>Component Reusability: Use modular UI components (React/Flutter components) to reduce duplication.</li> <li>Lazy Loading: Load only the necessary chunks of JS or modules, especially on mobile.</li> <li>Optimize for First Paint: Reduce time-to-first-render for class dashboard and content pages.</li> </ul>"},{"location":"engineering-notes/#4-video-live-class-handling","title":"4. Video &amp; Live Class Handling","text":"<ul> <li>Adaptive Bitrate Streaming: Must be enabled via HLS/DASH to automatically adjust based on network speed.</li> <li>Error Recovery: If stream disconnects, auto-reconnect without requiring app reload.</li> <li>Bandwidth Saver Option: Provide students with a \u201cLow Data Mode\u201d toggle.</li> </ul>"},{"location":"engineering-notes/#5-test-exam-flows","title":"5. Test &amp; Exam Flows","text":"<ul> <li>Autosave on Form Inputs: While writing answers, especially subjective tests, ensure the system periodically saves progress.</li> <li>Allow Graceful Submissions: Let students know if their submission failed, and retry in the background.</li> <li>Secure Uploads: Ensure file uploads (answer sheets) are virus-scanned, secure, and resumable.</li> </ul>"},{"location":"engineering-notes/#6-notifications-messaging","title":"6. Notifications &amp; Messaging","text":"<ul> <li>Use Topic-Based Notifications: Push notifications should be filtered by course, class, and batch.</li> <li>Avoid Notification Overload: Only notify students when it\u2019s relevant (e.g., class starting, result uploaded).</li> </ul>"},{"location":"engineering-notes/#7-integration-tips","title":"7. Integration Tips","text":"<ul> <li>Use Environment Configs: Avoid hardcoding URLs or secrets; use environment files for staging/prod builds.</li> <li>Retry Logic for APIs: Use exponential backoff for retrying critical API calls like join class, upload test, etc.</li> </ul>"},{"location":"engineering-notes/#8-analytics-observability","title":"8. Analytics &amp; Observability","text":"<ul> <li>Track:     - Join/leave events for live classes     - Test participation     - Course completion %</li> <li>Integrate error tracking (e.g., Sentry, Firebase Crashlytics)</li> <li>Use platform monitoring dashboards (Grafana, New Relic)</li> </ul>"},{"location":"engineering-notes/#9-security-practices","title":"9. Security Practices","text":"<ul> <li>Use HTTPS for all communications</li> <li>Never store passwords in plaintext (use OAuth/hashed methods)</li> <li>Validate all inputs from forms, especially uploads</li> <li>Protect APIs with authentication and role-based access</li> </ul>"},{"location":"engineering-notes/#10-collaboration-guidelines","title":"10. Collaboration Guidelines","text":"<ul> <li>Use a common API schema across frontend and backend</li> <li>Maintain shared documentation (Postman/Swagger)</li> <li>Sync regularly with product/design team on UX feedback from students and teachers</li> </ul>"},{"location":"engineering-notes/#final-word","title":"Final Word","text":"<p>The platform\u2019s success depends not just on features, but on how fast, reliable, and frustration-free it feels\u2014especially under poor network conditions. Always think: Would this work smoothly for a student in a remote village on a basic phone?</p> <p>Let\u2019s build something impactful. \ud83d\udca1</p>"},{"location":"infrastructure/","title":"Infrastructure, Security, and Analytics","text":""},{"location":"infrastructure/#integrations","title":"Integrations","text":"<ul> <li>Google Analytics</li> <li>Webhooks for updates/events</li> </ul>"},{"location":"infrastructure/#analytics-and-reporting","title":"Analytics and Reporting","text":"<ul> <li>Dashboards for engagement, progress, system usage</li> </ul>"},{"location":"infrastructure/#security-and-compliance","title":"Security and Compliance","text":"<ul> <li>GDPR-ready</li> <li>Access control</li> <li>Data encryption</li> </ul>"},{"location":"infrastructure/#performance","title":"Performance","text":"<ul> <li>Scalable cloud-based infrastructure</li> <li>Mobile-first UI</li> <li>Multi-device support</li> </ul>"},{"location":"live-classes-tests/","title":"Live Classes and Test Management","text":""},{"location":"live-classes-tests/#live-classes","title":"Live Classes","text":"<ul> <li>Schedule live sessions for batches/courses</li> <li>Auto-start at scheduled time</li> <li>Features:     - Raise hand, speak     - Chat, polls, quizzes     - Whiteboard and screen sharing</li> </ul>"},{"location":"live-classes-tests/#recordings","title":"Recordings","text":"<ul> <li>Auto-recorded and stored in course structure</li> <li>Accessible after session</li> </ul>"},{"location":"live-classes-tests/#test-portal","title":"Test Portal","text":"<ul> <li>MCQ + Subjective tests</li> <li>Download/upload answer sheets</li> <li>Teachers mark and re-upload with comments</li> </ul>"},{"location":"live-classes-tests/#notifications","title":"Notifications","text":"<ul> <li>Per-course/subject notice board</li> <li>Sends alerts when sessions/tests are scheduled</li> </ul>"},{"location":"overview/","title":"Introduction","text":"<p>This document outlines the software requirements for the development of an Matsci Odia learning platform aimed at providing a comprehensive educational experience for students. The platform will allow students to access courses, attend live lectures, participate in discussions, take exams, and interact with teachers.</p>"},{"location":"overview/#2-user-requirements","title":"2. User Requirements","text":""},{"location":"overview/#21-student-requirements","title":"2.1 Student Requirements","text":""},{"location":"overview/#authentication-and-profile-management","title":"Authentication and Profile Management","text":"<ul> <li>Students should be able to register and login using multiple providers such as Google and custom signup.</li> <li>Phone number and email should be unique identifiers and mandatory for registration.</li> </ul>"},{"location":"overview/#course-browsing-and-selection","title":"Course Browsing and Selection","text":"<ul> <li>Students can browse through available courses categorized into Class 9, Class 10, Class 11, Class 12, and Diploma Courses.</li> <li>Courses can be categorized into Free and Paid, with different pricing options.</li> <li>Each course may contain single subjects or packaged with multiple subjects:     - IT Course \u2013 IT     - BIPCM \u2013 Biology, Physics, Chemistry, Mathematics     - PCMI \u2013 Physics, Chemistry, Mathematics, IT</li> </ul>"},{"location":"overview/#course-enrollment-and-access","title":"Course Enrollment and Access","text":"<ul> <li>Students can purchase courses based on their interests.</li> <li>Free courses can be accessed for attending live lectures and viewing recordings.</li> </ul>"},{"location":"overview/#live-lectures","title":"Live Lectures","text":"<ul> <li>Students can attend scheduled live lectures.</li> <li>Features include:     - Chat, raise hands, and control streaming quality (default 320p)     - Speak with the teacher when allowed to unmute     - Multiple students can communicate simultaneously     - Teachers can block students from chat and voice     - Share screens, use whiteboards, and present PDFs, Docs, Videos, etc.     - Teachers can run polls (MCQ), show leaderboard</li> </ul>"},{"location":"overview/#recordings-access","title":"Recordings Access","text":"<ul> <li>Students can access past and uploaded live session recordings</li> <li>Recordings should be auto-saved and accessible</li> </ul>"},{"location":"overview/#exams-and-tests","title":"Exams and Tests","text":"<ul> <li>Objective and Subjective exams</li> <li>Raise exam/test related queries in-app</li> </ul>"},{"location":"overview/#help-requests-good-to-have","title":"Help Requests (Good to Have)","text":"<ul> <li>Students can raise help requests</li> <li>Teachers can respond live</li> </ul>"},{"location":"overview/#22-admin-requirements","title":"2.2 Admin Requirements","text":""},{"location":"overview/#scheduling","title":"Scheduling","text":"<ul> <li>Admin can schedule live classes, tests, exams, and webinars</li> </ul>"},{"location":"overview/#course-and-subject-management","title":"Course and Subject Management","text":"<ul> <li>Admin can create and manage courses and subjects</li> </ul>"},{"location":"overview/#user-management","title":"User Management","text":"<ul> <li>Admin can manage teacher accounts</li> </ul>"},{"location":"overview/#teacher-privileges","title":"Teacher Privileges","text":"<ul> <li>Teachers can have admin rights</li> <li>Multiple admins can exist</li> </ul>"},{"location":"overview/#3-non-functional-requirements","title":"3. Non-Functional Requirements","text":""},{"location":"overview/#security","title":"Security","text":"<ul> <li>Enforce secure login using OAuth and OTP-based mechanisms</li> <li>All communication must be encrypted using HTTPS/TLS</li> <li>Store sensitive information (e.g., passwords, payment data) using strong encryption standards (e.g., bcrypt, AES-256)</li> <li>Implement role-based access control (RBAC) for restricting user capabilities</li> </ul>"},{"location":"overview/#scalability","title":"Scalability","text":"<ul> <li>The system must support 5+ concurrent live classes, each handling 1,000+ students simultaneously without affecting performance</li> <li>Backend services should be auto-scalable using cloud-native orchestration (e.g., Kubernetes or serverless functions)</li> <li>Content delivery (live streams, video recordings, documents) must be optimized via global CDNs</li> <li>Real-time chat and interaction systems should scale to handle bursts of usage, especially during exams or lectures</li> <li>System must support future growth: up to 100,000+ daily active users</li> </ul>"},{"location":"overview/#reliability-and-availability","title":"Reliability and Availability","text":"<ul> <li>Ensure 99.9% uptime with high availability configurations (multi-zone deployments, failover clusters)</li> <li>Implement retry mechanisms and queue buffering (e.g., message queues) to handle spikes in load</li> <li>Graceful degradation strategies should ensure platform responsiveness even under partial failures</li> <li>Data backup strategy must include automated nightly backups and on-demand snapshots</li> </ul>"},{"location":"overview/#performance","title":"Performance","text":"<ul> <li>Live streaming must support adaptive bitrate streaming (ABR) to accommodate students with low bandwidth</li> <li>Load time for any page (including dashboard and course content) must be &lt; 2 seconds on average</li> <li>Real-time interactions (chat, polls, raise hand) must reflect actions within 250ms latency</li> <li>Caching strategies (browser, server-side, and CDN) should be implemented for static content</li> </ul>"},{"location":"overview/#usability","title":"Usability","text":"<ul> <li>The user interface should be optimized for:     - Desktop, tablet, and mobile devices (responsive design)     - Touch and keyboard navigation     - Screen reader accessibility (WCAG 2.1 Level AA compliance)</li> <li>Navigation should be intuitive with minimal clicks to reach key features like joining a class, viewing recordings, or accessing test materials</li> <li>The app should provide offline indicators and retry behavior when the connection is unstable</li> </ul>"},{"location":"overview/#observability-and-monitoring","title":"Observability and Monitoring","text":"<ul> <li>System must expose health checks, error logs, and metrics for real-time monitoring</li> <li>Integrate with centralized logging (e.g., ELK/EFK stack) and alerting systems (e.g., Prometheus + Grafana, New Relic)</li> <li>Automatically track latency, CPU usage, memory usage, and queue depth for all microservices</li> </ul>"},{"location":"overview/#compliance-and-data-protection","title":"Compliance and Data Protection","text":"<ul> <li>Adhere to GDPR and local data protection laws for student and teacher data</li> <li>Allow users to delete their accounts and associated data (Right to be Forgotten)</li> <li>Maintain an audit trail of significant user actions (logins, content access, test submissions)</li> </ul>"},{"location":"overview/#4-good-to-have","title":"4. Good to Have","text":""},{"location":"overview/#api-interface","title":"API Interface","text":"<ul> <li>API support for third-party integrations (e.g., scheduling systems)</li> </ul>"},{"location":"overview/#5-conclusion","title":"5. Conclusion","text":"<p>This document captures all the core and extended software requirements for the Matsci Odia platform, ensuring that it delivers an effective, scalable, and user-friendly experience for students and administrators alike.</p>"},{"location":"payments/","title":"Payments and Monetization","text":""},{"location":"payments/#student-payments","title":"Student Payments","text":"<ul> <li>Inline payment gateway (Stripe, PayPal, Razorpay)</li> <li>Coupon validation at checkout</li> <li>Pricing models:     - Free     - Paid (one-time)     - Subscriptions     - Bundles</li> </ul>"},{"location":"payments/#admin-options","title":"Admin Options","text":"<ul> <li>Add student directly</li> <li>Modify or cancel subscriptions with comments</li> </ul>"},{"location":"technical-requirements/","title":"\ud83d\udccc Technical Requirements \u2013 Matsci Odia Learning Platform","text":"<p>This document outlines the expected technical architecture and platform requirements for the development of the Matsci Odia online education system, including web and mobile applications.</p>"},{"location":"technical-requirements/#1-platform-overview","title":"\ud83e\udde9 1. Platform Overview","text":"<p>The platform consists of:</p> <ul> <li>A Mobile App for students (Android &amp; iOS)</li> <li>A Web Portal for teachers and admins</li> <li>A cloud-based backend for service orchestration and media storage</li> <li>Live class integration with a streaming provider</li> </ul>"},{"location":"technical-requirements/#2-mobile-application-students","title":"\ud83d\udcf1 2. Mobile Application (Students)","text":""},{"location":"technical-requirements/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Android (API 24+)</li> <li>iOS (iOS 12+)</li> </ul>"},{"location":"technical-requirements/#key-features","title":"Key Features","text":"<ul> <li>OTP and Google sign-in</li> <li>Course browsing and enrollment</li> <li>Join live classes with video and chat</li> <li>Raise hand and speak (controlled by teacher)</li> <li>Access lecture recordings</li> <li>Attempt MCQ/Subjective tests</li> <li>Upload answer sheets</li> <li>Batch-specific chat rooms</li> </ul>"},{"location":"technical-requirements/#recommended-tech","title":"Recommended Tech","text":"<ul> <li>Framework: React Native (single codebase) or Flutter</li> <li>Video SDK: Agora / Zoom (for stability &amp; mute control)</li> <li>Storage: AWS S3 / Cloudflare R2 (for videos, notes, and tests)</li> <li>Notifications: Firebase (Android), APNs (iOS)</li> <li>Offline Mode: Cache recent content for slow/no internet</li> </ul>"},{"location":"technical-requirements/#suggestions","title":"\ud83d\ude80 Suggestions","text":"<ul> <li>Use adaptive bitrate streaming to support low-bandwidth students</li> <li>Implement background retry queue for exam uploads</li> <li>Compress and optimize assets for low-end phones</li> </ul>"},{"location":"technical-requirements/#3-admin-teacher-web-portal","title":"\ud83e\uddd1\u200d\ud83d\udcbb 3. Admin / Teacher Web Portal","text":""},{"location":"technical-requirements/#key-features_1","title":"Key Features","text":"<ul> <li>Schedule and run live sessions</li> <li>Upload class content (PDF, DOC, Video, etc.)</li> <li>Create and evaluate quizzes and exams</li> <li>Manage users (teachers/students)</li> <li>Access dashboards and usage metrics</li> <li>Apply and manage coupons/subscriptions</li> </ul>"},{"location":"technical-requirements/#recommended-tech-stack","title":"Recommended Tech Stack","text":"Layer Tech Stack Frontend React.js (with Tailwind or MUI) Backend Spring Boot (Java), RESTful APIs DB PostgreSQL on AWS RDS Streaming Agora / Zoom / Jitsi (pluggable) File Storage AWS S3 or Cloudflare R2 CI/CD GitHub Actions"},{"location":"technical-requirements/#suggestions_1","title":"\ud83d\udca1 Suggestions","text":"<ul> <li>Use Role-Based Access Control (RBAC) with Spring Security</li> <li>Organize content in S3 using course\u2192batch\u2192session structure</li> <li>Enable pre-signed uploads for student answer sheets</li> <li>Use pagination, filters, and caching for high-volume pages</li> <li>Add CSV export/import for managing large student rosters</li> </ul>"},{"location":"technical-requirements/#4-security","title":"\ud83d\udd12 4. Security","text":""},{"location":"technical-requirements/#essentials","title":"Essentials","text":"<ul> <li>All endpoints secured with JWT or OAuth2</li> <li>Passwordless auth via OTP (login link/phone code)</li> <li>HTTPS enforced across all layers</li> <li>Secure multipart upload for large files</li> <li>Audit logs for all admin actions</li> <li>Encrypt PII at rest and in transit</li> </ul>"},{"location":"technical-requirements/#suggestions_2","title":"\ud83d\udea8 Suggestions","text":"<ul> <li>Use rate-limiting and CAPTCHA for public APIs (e.g. login)</li> <li>Add IP/location logging for admin access</li> <li>Integrate with Vault or AWS Secrets Manager for secure config</li> </ul>"},{"location":"technical-requirements/#5-performance-scalability","title":"\ud83d\ude80 5. Performance &amp; Scalability","text":""},{"location":"technical-requirements/#requirements","title":"Requirements","text":"<ul> <li>App load &lt; 3s on 3G connections</li> <li>Handle 5+ parallel classes with 1000+ students each</li> <li>Low-latency chat and audio (under 300ms)</li> <li>Dynamic scaling of services and media delivery</li> </ul>"},{"location":"technical-requirements/#suggestions_3","title":"Suggestions","text":"<ul> <li>Use CDN (CloudFront, Cloudflare) for static &amp; video content</li> <li>Scale backend via Kubernetes or ECS Fargate</li> <li>Use Redis caching for course data and test metadata</li> <li>Employ WebSocket or MQTT for real-time chat</li> </ul>"},{"location":"technical-requirements/#6-infrastructure","title":"\ud83d\udce6 6. Infrastructure","text":"Component Suggested Service Hosting AWS / GCP / Azure CI/CD GitHub Actions DB AWS RDS (PostgreSQL), daily backup Object Storage AWS S3, lifecycle policy enabled Domain Route53 / Cloudflare DNS Monitoring Prometheus + Grafana / New Relic"},{"location":"technical-requirements/#devops-suggestions","title":"DevOps Suggestions","text":"<ul> <li>Use Terraform or IaC for infrastructure provisioning</li> <li>Set up stage &amp; prod environments with clear config</li> <li>Enable autoscaling &amp; alerting</li> </ul>"},{"location":"technical-requirements/#7-analytics-and-observability","title":"\ud83d\udcca 7. Analytics and Observability","text":""},{"location":"technical-requirements/#requirements_1","title":"Requirements","text":"<ul> <li>Track user behavior: logins, class joins, test activity</li> <li>Monitor backend latency and availability</li> <li>Alert on service failures and high load</li> </ul>"},{"location":"technical-requirements/#tools","title":"Tools","text":"<ul> <li>Frontend: Google Analytics + Custom Events</li> <li>Backend: Prometheus, Loki, Grafana</li> <li>Error Tracking: Sentry or Firebase Crashlytics</li> </ul>"},{"location":"technical-requirements/#8-engineering-notes","title":"\ud83d\udccc 8. Engineering Notes","text":"<ul> <li>All APIs must be versioned (e.g. <code>/api/v1/...</code>)</li> <li>Use OpenAPI (Swagger) for backend contract documentation</li> <li>Structure repos into mono-repo or clearly named services</li> <li>Use <code>.env</code> files with <code>.example</code> templates</li> <li>Store large file uploads via S3 pre-signed URLs</li> <li>Provide dark mode toggle for better UX</li> <li>Maintain strong automated test coverage (unit + integration)</li> </ul>"},{"location":"technical-requirements/#summary","title":"\ud83d\udcd8 Summary","text":"Area Stack / Tool Mobile App React Native / Flutter Web Frontend React + Tailwind / MUI Backend Services Spring Boot + JWT Database PostgreSQL (RDS) File Storage AWS S3 Live Video Agora / Zoom SDK DevOps GitHub Actions + Docker Analytics Google Analytics + Prometheus Real-time Comm WebSocket / MQTT"},{"location":"technical-requirements/#optional-future-features","title":"\ud83d\udca1 Optional Future Features","text":"<ul> <li>Offline access to downloaded lectures</li> <li>Gamified quiz results and streak tracking</li> <li>Course recommendations using ML</li> <li>Native LMS plugin compatibility (SCORM/xAPI)</li> <li>Video transcription and subtitle generation</li> </ul>"},{"location":"user-requirements/","title":"User Requirements","text":""},{"location":"user-requirements/#authentication-and-roles","title":"Authentication and Roles","text":"<ul> <li>Authenticate via Google, Email, or Phone Number with OTP.</li> <li>Unique identifiers: Phone number and Email.</li> <li>Roles:     - Student     - Teacher     - Admin     - Super Admin</li> </ul>"},{"location":"user-requirements/#student-features","title":"Student Features","text":"<ul> <li>Register/login using multiple providers</li> <li>Browse, filter, and search for courses</li> <li>View detailed course descriptions and instructor bios</li> <li>Enroll in free or paid (one-time/subscription) courses</li> <li>Access live lectures, video content, resources, and tests</li> <li>Batch-based chat with peers and teachers (per subject)</li> <li>Participate in discussions, polls, quizzes</li> <li>Track progress and assessment results</li> <li>Raise hand, speak, and chat in live sessions</li> </ul>"}]}